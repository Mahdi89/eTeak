#!/bin/sh
exec perl -x $0 ${1+"$@"}
        if 0;
#!perl

$binary = $ARGV[0];
shift @ARGV;
@files = ();
$bindir = "bin";

while ($#ARGV > -1)
{
	if ($ARGV[0] eq "--bindir")
	{
		$bindir = $ARGV[1];
		shift @ARGV;
	} else {
		push @files, $ARGV[0];
	}

	shift @ARGV;
}

%modules = ();
%flagss = ();

for $file (@files)
{
	my @imports = ();
	my $flags = ();
	my $module = "";

	open (FILE, "<$file");

	while (<FILE>)
	{
		if ($module eq "" and /module\s+([A-Z][\w.]+)/)
		{
			$module = $1;
			$module =~ s/\./\//;
		} elsif (/^\s*import(\s+qualified)?\s+([\w.]+)/)
		{
			my $import = $2;
			$import =~ s/\./\//;
			push @imports, $import;
		} elsif (/^{-\# *OPTIONS_GHC *(.*) *\#-}/)
		{
			my $flag = $1;
			$flag =~ s/\s*$//;
			$flags = $flags . " " . $flag;
		}
	}
	$modules{$module} = \@imports;
	$flags =~ s/^\s*(.*)/\1/;
	$flagss{$module} = $flags;

	close (FILE);
}

@moduleNames = keys %modules;

@objects = ();
@interfaces = ();
@sources = ();

for $module (@moduleNames)
{
	push @objects, ($module . ".o");
	push @interfaces, ($module . ".hi");
	push @sources, ($module . ".hs");
}

print "## Process this file with automake to produce Makefile.in\n";
print "# Generated by teak makemake\n\n";

print $bindir, "_PROGRAMS = ", $binary, "\n\n";

$HFLAGS = $ENV{"HFLAGS"};
$HLDFLAGS = $ENV{"HLDFLAGS"};

print $binary, "_SOURCES = ", (join " ", @sources), "\n\n";
print "objects = ", (join " ", @objects), "\n\n";
print "interfaces = ", (join " ", @interfaces), "\n\n";
print "HFLAGS = $HFLAGS\n\n";
print "HLDFLAGS = $HLDFLAGS\n\n";
print $binary, ": \$(objects)\n";
print "\t\$(GHC) -o \$\@ \$(HFLAGS) \$(HLDFLAGS) \$(objects)\n\n";

print "SUFFIXES = .hs .o\n\n";
print ".hs.o:\n";
print "\t\$(GHC) \$(HFLAGS) -c \$<\n\n";

for $module (@moduleNames)
{
	my @imports = @{$modules{$module}};
	my $flags = $flagss{$module};
	print $module, ".o: ", $module, ".hs";

	for $import (@imports)
	{
		if (defined ($modules{$import}))
		{
			print " ", $import, ".o";
		}
	}
	if ($flags eq "")
	{
		print "\n\n";
	} else {
		print "\n\t\$(GHC) $flags \$(HFLAGS) -c \$<\n\n"
	}
}

print "CLEANFILES = \$(objects) \$(interfaces)\n\n";
