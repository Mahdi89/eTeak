-- Radix-3 Booth's multiplier for nanoSpa / aviSpa
--    Rolled Radix-3 Booth's algorithm (11 iteration cycles)
--
-- v1.0 20/04/2007 -ltaraz
--

import [balsa.types.basic]
import [nanoSpaTypes]

procedure nanoMBoothR3rolled
( 
  input cin     : Datapath_2;
  input res     : Datapath_2;

  input a       : Datapath_2;
  input b       : Datapath_3;
  input c       : Datapath_2;
  input mlength : bit;
  input macc    : bit;

  output load   : bit;
  input  done   : bit;

  output opA    : Datapath_2;
  output opB    : Datapath_2;
  output cs     : Datapath_2;

  output raA    : Datapath;
  output raB    : Datapath;
  output rac0   : bit;
  input  raS    : Datapath;
  input  racN   : bit;
 
  output pH     : Datapath;
  output pL     : Datapath;
  output z      : bit;
  output n      : bit
) is
local
    channel sout    : Datapath_2
    channel csout   : Datapath_2
    channel c0      : bit

    variable ctrl   : 4 bits
    variable  vph   : Datapath
    variable  vpl   : Datapath
    variable va     : Datapath_2
    variable v2a    : Datapath_2
    variable v3a    : Datapath_2
    variable v4a    : Datapath_2
    variable nva    : Datapath_2
    variable nv2a   : Datapath_2
    variable nv3a   : Datapath_2
    variable nv4a   : Datapath_2
    variable crh    : Datapath_2
    variable crl    : Datapath_3
    variable rh     : Datapath_2
    variable rl     : Datapath_3
    variable rhp    : Datapath_2
    variable crhp   : Datapath_2
    variable crlp   : Datapath_3
    variable rlp    : Datapath_3
    variable go     : 1 bits
    variable vmlength : bit
    variable vmacc    : bit
    variable vZ       : bit
    variable vN       : bit

begin
    loop --main

        a,b,c,mlength, macc ->! then
            vmlength := mlength
          ||
            vmacc := macc
          ||
            va  := a
          ||
            v2a := (#0b0[0..0] @ #a[0 .. xlength-2] as Datapath_2)
          ||
            v4a :=  (#(0b00 as 2 bits)[0..1] @ #a[0 .. xlength-3] as Datapath_2)
            -- calculate 3A= 2A + A
          ||
            raA <- (#a[1 .. length] as Datapath)  -- a without b0
          ||
            raB <- (a as Datapath) -- 2a without b0
          ||
            rac0<- 0
          ||
            raS,racN -> (-- ! --) then --!!!!
                 v3a := (#a[0..0] @#raS[0..length-1] @ #racN[0..0] @ #a[length..length]  as Datapath_2)
            end
          ||
            rlp := b 
          ||
            rhp := c
          ||
            ctrl := (#b[0..3] as 4 bits)
          ||
            crhp := (0b0 as Datapath_2)
          ||
            crlp := (0b0 as Datapath_3)
        end -- a,b,c,mlength -> 
      ;
            nva := not va
          ||
            nv2a := not v2a
          ||
            nv3a := not v3a
          ||
            nv4a := not v4a
      ||
        load <- 1  
      ; 
        loop --iterate
            opA <- rhp
          ||
            cs  <- crhp
          ||
            res -> sout
          ||
            cin -> csout
          ||
            c0 <- (#ctrl[3..3] as bit)
          ||
            case ctrl of
            0b0001,0b0010 then --sout <- (rhp + va as Datapath_2)
                opB <- va
            | 0b0011,0b0100 then --  sout <- (rhp + v2a as Datapath_2)
                opB <- v2a
            | 0b101,0b0110 then --  sout <- (rhp +  v3a  as Datapath_2)
                opB <- v3a
            | 0b0111 then --  sout <- (rhp + v4a as Datapath_2)
                opB <- v4a
            | 0b1000 then --  sout <- (rhp + nv4a + 1 as Datapath_2)
                opB <- nv4a
            | 0b1001,0b1010 then --  sout <- (rhp + nv3a + 1 as Datapath_2)
                opB <- nv3a
            | 0b1011,0b1100 then --  sout <- (rhp + nv2a + 1 as Datapath_2)
                opB <- nv2a
            | 0b1101,0b1110 then --  sout <- (rhp + nva + 1 as Datapath_2)
                opB <- nva
            else
                opB <- (((ctrl as 4 signed bits) as sDatapath_2) as Datapath_2)
            end -- case 2
	        -- shifter:
          ||
            sout,csout,c0 ->! then --shift 2 times (rh arithmetic, but rl logic)
                crh := csout
              ||
                crl := (#crlp[3..xlength-1] @ #c0[0..0] @ #csout[0..1] as Datapath_3)
              ||
                rh := (((#sout[3..xlength-1] as xlength-3 signed bits) as sDatapath_2) as Datapath_2)
              ||
                rl := (#rlp[3..xlength-1] @ #sout[0..2] as Datapath_3)
            end -- sout ->
          ||
            done ->! then
               go := done 
            end   
        while go then-- while counter /= (length/2 + 1 as tbits bits)
            crhp := (#crh[2..xlength-1] @ #crh[xlength-1..xlength-1] @ #crh[xlength-1..xlength-1] as Datapath_2)
          ||
            crlp := crl
          ||
            rhp  := rh
          ||
            rlp  := rl
          ||
            ctrl := (#rl[0..3] as 4 bits)
          ||load <- 0 
        end --loop iterate
      ; -- calculate pL
        raA <- (#rl[2..length+1] as Datapath)
      ||
        raB <- (#crl[2..length+1] as Datapath)
      ||
        rac0 <- 0 
      ||
        raS,racN ->! then 
            vpl := raS
          ||
            go := racN  -- save carry for pH
          ||
            vN := (#raS[31] as bit)
          ||
            vZ := (raS = 0 as bit)  
        end
      ;
        if vmlength then -- calculate pH and produce two results + flags
            raA <- (#rl[length+2..length+2] @  #rh[0..length-2] as Datapath)
          ||
            raB <- (#crh[1..length] as Datapath)
          ||
            rac0 <- go 
          ||
            raS,racN ->! then 
                vph := raS --(#raS[0..length-1] as Datapath)
            end -- raS, raN ->!
          ; 
            pH <- vph 
          ||
            pL <- vpl
          ||
            if vmacc then 
                z <- vZ
            else
                z  <- (vph = 0 as bit) and vZ
            end
          ||
            n  <- (#vph[31]as bit)
        else -- only produce pL & flags
            pL <- vpl
          ||
            z   <- vZ
          ||
            n   <- vN
        end -- if vmlength
    end --loop main
end 
