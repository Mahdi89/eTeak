
  NOTE: This file is out of date.  See ../src/BalsaParser.hs for definitive answers
  Teak-recognised Balsa EBNF

Lexical:

<digit> ::= `0'...`9'
<letter> ::= `a'...`z' | `A'...`Z'
<identifier> ::= ( <letter> | `_' ) ( ( <letter> | <digit> | `_' ) )*
<label> ::= <identifier> `:'
<literal> ::= `1'...`9' ( ( <digit> | `_' ) )*
|	`0' ( `0'...`7' | `_' )*
|	( `0b' | `0B' ) ( `0' | `1' | `_' | `x' | `X' | `?' )+
|	( `0x' | `0X' ) ( `0'...`9' | `a'...`f' | `A'...`F' | `_' | `x' | `X' | `?' )+
|	`?'
<string_char> ::= ( <letter> | <digit> | ` ' | `!' | `#' | `$' | `%' | `&' | "'" | `(' | `)' | `*' | `+'
    | `,' | `-' | `.' | `/' | `:' | `;' | `<' | `=' | `>' | `?' | `@' | `[' | `]' | `^' | `_' | "`" | `{'
    | `|' | `}' | `~' )
<string> ::= `"' ( <string_char> )* `"'

Non terminals:

<file> ::= ( `import' `[' <dotted_path> `]' )* <outer_declarations>

<dotted_path> ::= <identifier> ( `.' <identifier> )*

<outer_declarations> ::= ( <outer_declaration> )*

<outer_declaration> ::= `type' <identifier> `is' <type_declaration>
|	`constant' <identifier> `=' <expression>
|	`procedure' <identifier> ( <attributes> )? `is' <identifier> ( `(' <procedure_formals> `)' )?
|	`procedure' <identifier> ( `(' <procedure_formals> `)' )? `is'
	    ( `local' )? <inner_declarations> ( <block_body> | <loop_command> )
|	`function' <identifier> ( `(' <function_formals> `)' )? `=' <expression>
|	`function' <identifier> ( `(' <builtin_function_formals> `)' )? `is' `builtin' `:' <type>
|	`if' <expression> `then' <outer_declarations>
	    ( `|' <expression> `then' <outer_declarations> )*
	    ( `else' <outer_declarations> )?
	    `end'

<type_declaration> ::= <type>
|	`record' <identifiers> `:' <type>
	    ( `;' <identifiers> `:' <type> )*
	    ( `end' | ( `over' <type> ) )
|	`enumeration' <identifier> ( `=' <expression> )?
	    ( `,' <identifier> ( `=' <expression> )? )*
	    ( `end' | ( `over' <type> ) )
|	`builtin'

<identifiers> ::= <identifier> ( `;' <identifier> )*

<type> ::= <identifier>
|	<expression> ( `signed' )? `bits'
|	`array' <range> `of' <type>

<function_formals> ::= <identifiers> `:' <type> ( `;' <identifiers> `:' <type> )*

<builtin_function_formals> ::= <formal_parameters>
|	<function_formals>
|	<formal_parameters> `;' <function_formals>

<procedure_formals> ::= <formal_parameters>
|	<formal_ports>
|	<formal_parameters> `;' <formal_ports>

<formal_parameters> ::= `parameter' <identifiers> `:' <type>
	    ( `;' `parameter' <identifiers> `:' <type> )*

<formal_ports> ::= <formal_port> ( `;' <formal_port> )*

<channel_array> ::= ( `array' <range> `of' )*

<formal_port> ::= <channel_array> ( `input' | `output' ) <identifiers> `:' <type>
|	<channel_array> `sync' <identifiers>
|	`if' <expression> `then' <formal_ports>
	    ( `|' <expression> `then' <formal_ports> )*
	    ( `else' <formal_ports> )?
	    `end'

<range> ::= <expression>
|	<expression> `..' <expression>
|	`over' <type>

<inner_declarations> ::= ( <inner_declaration> )*

<inner_declaration> ::= <outer_declaration>
|	`variable' <identifiers> `:' <type> .
|	<channel_array> `channel' <identifiers> `:' <type>
|	<channel_array> `sync' <identifiers>
|	`shared' <identifier> `is' ( `local' )? <inner_declarations>
	    ( <block_body> | <loop_command> )
|	`if' <expression> `then' <inner_declarations>
	    ( `|' <expression> `then' <inner_declarations> )*
	    ( `else' <inner_declarations> )?
	    `end'

<expression> ::= <identifier>
|	<literal>
|	<string>
|	( <identifier> )? `{' <expressions> `}'
|	<identifier> "'" <identifier>
|	<unary_operator> <expression>
|	`sizeof' <identifier>
|	<expression> <binary_operator> <expression>
|	<expression> `.' <identifier>
|	<expression> `[' <range> `]'
|	<expression> `as' <type>
|	<expression> `:' <type>
|	`#' <expression>
|	`(' <expression> `)'
|	<identifier> `(' ( <expressions> )? `)'

<attribute> ::= <identifier> ( `=' <expression> )?
<attributes> ::= `(*' ( <attribute> ( `,' <attribute> )* )? `*)'

<expressions> ::= <expression> ( `,' <expression> )*

<unary_operator> ::= ( `-' | `+' | `not' | `log' | `#' )

<binary_operator> ::= ( `+' | `-' | `*' | `/' | `%' | `^' | `=' | `/=' | `<' | `>' | `<=' | `>=' | `and' | `or' | `xor' | `@' )

<command> ::=
|	<label> <command>
|	`continue'
|	`halt'
|	<channel> `->' <lvalue>
|	<channel> `->' <channel>
|	<channels> `->' `then' <command> `end'
|	<channel> `<-' <expression>
|	`sync' <channel>
|	<lvalue> `:=' <expression>
|	<block>
|	<command> `;' <command>
|	<command> `||' <command>
|	<loop_command>
|	`if' <guards> ( `else' <command> )? `end'
|	`case' <expression> `of' <case_guard>
	    ( `|' <case_guard> )*
	    ( `else' <command> )?
	    `end'
|	`for' ( `||' | `;' ) <identifier> `in' <range> `then' <command> `end'
|	`select' <channel_guard> ( `|' <channel_guard> )* `end'
|	`arbitrate' <channel_guard> `|' <channel_guard> `end'
|	`print' <expressions>
|	<identifier> `(' ( <procedure_actuals> )? `)'

<loop_command> ::= `loop' ( <command> )? ( `while' <expression> ( `then' <command> )? )? `end'

<channels> ::= <channel> ( `,' <channel> )*

<channel> ::= <identifier>
|	<identifier> `[' <expression> `]'

<lvalue> ::= <identifier>
|	<lvalue> `.' <identifier>
|	<lvalue> `[' <expression> `]'

<block> ::= ( `local' <inner_declarations> )? <block_body>
|	`[' <command> `]'

<block_body> ::= `begin' <command> `end'

<guards> ::= <expression> `then' <command>
	    ( `|' <expression> `then' <command> )*

<case_guard> ::= <case_matches> `then' <command>
|	`for' <identifier> `in' <case_matches> `then' <command>

<case_match> ::= <expression>
|	<expression> `..' <expression>

<case_matches> ::= <case_match> ( `,' <case_match> )*

<channel_guard> ::= <channels> `then' <command>
	    ( `|' <channels> `then' <command> )*

<procedure_actuals> ::= <actual_parameters>
|	<actual_channels>
|	<actual_parameters> `,' <actual_channels> 

<actual_parameters> ::= <actual_parameter> ( `,' <actual_parameter> )*

<actual_parameter> ::= <expression>
|	( `type' )? <type>

<actual_channels> ::= <actual_channel> ( `,' <actual_channel> )*

<actual_channel> ::= <identifier>
|	<actual_channel> `[' <range> `]'
|	`<-' <expression>
|	`->' <lvalue>
|	<block>
|	`{' <actual_channel> ( `,' <actual_channel> )* `}'
|	<actual_channel> `@' <actual_channel>

